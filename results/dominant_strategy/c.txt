(WoP) wkav@16:06:00 wkav-B250M-D2V:[~/Documents/phd/chained_adversary_generation]: python find_dominant_strategy.py d output/15_3 0
Pair: KA generating optimal strategy, this can take up to 5 minutes ...
Strategy generated, calculating adversaries..
Comparing adversary for KW against optimal symmetric strategy for KA, result: 0.8077299932761935
Comparing adversary for WK against optimal symmetric strategy for KA, result: 0.7159353047087473
Comparing adversary for AW against optimal symmetric strategy for KA, result: 0.6650626772661505
Comparing adversary for WA against optimal symmetric strategy for KA, result: 0.6722093640350804
Pair: KW generating optimal strategy, this can take up to 5 minutes ...
Strategy generated, calculating adversaries..
Comparing adversary for KA against optimal symmetric strategy for KW, result: 0.4338526950333075
Comparing adversary for AK against optimal symmetric strategy for KW, result: 0.6219326884023193
Comparing adversary for AW against optimal symmetric strategy for KW, result: 0.5315339471831788
Comparing adversary for WA against optimal symmetric strategy for KW, result: 0.6087575037487426
Pair: AW generating optimal strategy, this can take up to 5 minutes ...
Strategy generated, calculating adversaries..
Comparing adversary for KA against optimal symmetric strategy for AW, result: 0.5077104426866317
Comparing adversary for AK against optimal symmetric strategy for AW, result: 0.4995754920079709
Comparing adversary for KW against optimal symmetric strategy for AW, result: 0.5157540405440764
Comparing adversary for WK against optimal symmetric strategy for AW, result: 0.7966226587713687
