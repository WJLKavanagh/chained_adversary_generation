09:22:57 - william @ ~/Documents/phd/chained_adversary_generation: python find_dominant_strategy.py "b" "output/12_3" 0
Pair: KA generating optimal strategy, this can take up to 5 minutes ...
Strategy generated, calculating adversaries..
Comparing adversary for KW against optimal symmetric strategy for KA, result: 0.8752967419593848
Comparing adversary for WK against optimal symmetric strategy for KA, result: 0.7759652285624449
Comparing adversary for AW against optimal symmetric strategy for KA, result: 0.9484157054553485
Comparing adversary for WA against optimal symmetric strategy for KA, result: 0.5938851723212665
Pair: KW generating optimal strategy, this can take up to 5 minutes ...
Strategy generated, calculating adversaries..
Comparing adversary for KA against optimal symmetric strategy for KW, result: 0.2502673385340397
Comparing adversary for AK against optimal symmetric strategy for KW, result: 0.2391241725049259
Comparing adversary for AW against optimal symmetric strategy for KW, result: 0.46321680313663294
Comparing adversary for WA against optimal symmetric strategy for KW, result: 0.23823946033700197
Pair: AW generating optimal strategy, this can take up to 5 minutes ...
Strategy generated, calculating adversaries..
Comparing adversary for KA against optimal symmetric strategy for AW, result: 0.8727321248366904
Comparing adversary for AK against optimal symmetric strategy for AW, result: 0.6783500681290615
Comparing adversary for KW against optimal symmetric strategy for AW, result: 0.8908327052252848
Comparing adversary for WK against optimal symmetric strategy for AW, result: 0.9058664739214506
